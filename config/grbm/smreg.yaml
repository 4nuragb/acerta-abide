!obj:pylearn2.train.Train {

    dataset: &train !obj:csv_dataset.CSVDataset {
        path: '{data_source}',
        expect_headers: False,
        expect_labels: True,
        start: {data_train_start},
        stop: {data_train_stop},
        transformers: [
            &trans1 !pkl: {data_transform_1},
            &trans2 !pkl: {data_transform_2},
            &trans3 !pkl: {data_transform_3},
        ],
    },

    model: !obj:pylearn2.models.softmax_regression.SoftmaxRegression {
        n_classes: 2,
        irange: 0.,
        nvis: {layer_in},
        init_bias_target_marginals: *train
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        # learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
        #     init_momentum: .5,
        # },
        batch_size: {layer_batch},
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:csv_dataset.CSVDataset {
                path: '{data_source}',
                expect_headers: False,
                expect_labels: True,
                start: {data_valid_start},
                stop: {data_valid_stop},
                transformers: [
                    *trans1,
                    *trans2,
                    *trans3,
                ],
            },
            'test': !obj:csv_dataset.CSVDataset {
                path: '{test_data_source}',
                expect_headers: False,
                expect_labels: True,
                start: 0,
                stop: 100,
                transformers: [
                    *trans1,
                    *trans2,
                    *trans3,
                ],
            },
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
    },

    extensions: [
        !obj:best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file},
        },
    ],

}
