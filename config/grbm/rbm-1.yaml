!obj:pylearn2.train.Train {

    dataset: &data !obj:pylearn2.datasets.binarizer.Binarizer {
        raw: !obj:csv_dataset.CSVDataset {
            path: '{data_source}',
            expect_headers: False,
            expect_labels: True,
            start: {data_train_start},
            stop: {data_train_stop},
        },
    },

    model: !obj:pylearn2.models.dbm.DBM {
        niter: 1,
        batch_size: {layer_batch},
        visible_layer: !obj:pylearn2.models.dbm.BinaryVector {
            nvis: {layer_in},
            bias_from_marginals: *data,
        },
        hidden_layers: [
            !obj:pylearn2.models.dbm.BinaryVectorMaxPool {
                layer_name: 'h',
                detector_layer_dim: {layer_out},
                pool_size: 1,
                irange: .05,
                init_bias: -2.,
            }
       ]
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 1e-3,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
        },
        monitoring_batches: 10,
        monitoring_dataset: *data,
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.dbm.VariationalPCD {
                    num_chains: 100,
                    num_gibbs_steps: 5,
                },
                !obj:pylearn2.costs.dbm.WeightDecay {
                    coeffs: [ .0001  ],
                },
                !obj:pylearn2.costs.dbm.TorontoSparsity {
                    targets: [ .2 ],
                    coeffs: [ .001 ],
                }
            ],
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
        update_callbacks: [
            !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
                decay_factor: 1.000015,
                min_lr: 0.0001,
            }
        ]
    },

    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            final_momentum: .9,
            start: 5,
            saturate: 6,
        },
        !obj:best_params.MonitorBasedSaveBest {
             channel_name: "objective",
             save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: "{log_file}",
        },
    ],

}