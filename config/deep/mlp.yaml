!obj:pylearn2.train.Train {

    dataset: &train !obj:csv_dataset.CSVDataset {
        path: "{data_source}",
        expect_headers: False,
        expect_labels: True,
        start: {data_train_start},
        stop: {data_train_stop},
    },

    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: {layer_batch},
        nvis: {layer_in},
        layers: [
            !obj:pretrained.PretrainedLayer {
                layer_name: "h1",
                layer_content: !pkl: {data_transform_1},
            },
            !obj:pretrained.PretrainedLayer {
                layer_name: "h2",
                layer_content: !pkl: {data_transform_2},
            },
            # !obj:pylearn2.models.mlp.PretrainedLayer {
            #     layer_name: "h3",
            #     layer_content: !pkl: {data_transform_3},
            # },
            !obj:pylearn2.models.mlp.Softmax {
                max_col_norm: 1.9365,
                layer_name: "y",
                n_classes: 2,
                irange: .005,
            },
        ],
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .005,
        # learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
        #     init_momentum: .5,
        # },
        monitoring_dataset: {
            "train": *train,
            "valid": !obj:csv_dataset.CSVDataset {
                path: "{data_source}",
                expect_headers: False,
                expect_labels: True,
                start: {data_valid_start},
                stop: {data_valid_stop},
            },
            "test": !obj:csv_dataset.CSVDataset {
                path: "{test_data_source}",
                expect_headers: False,
                expect_labels: True,
                start: 0,
                stop: 100,
            },
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.mlp.Default {},
                !obj:pylearn2.costs.mlp.WeightDecay {
                    coeffs: {
                        'h1': .00005,
                        'h2': .00005,
                        'y': .00005,
                    },
                },
            ],
        },
        # cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
        #     # input_include_probs: { 'h1' : .8 , 'h2' : .8 },
        #     # input_scales: { 'h1': 1. , 'h2': 1. }
        #     default_input_include_prob: .4
        # },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001,
        },
    },

    extensions: [
        # !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
        #     start: 1,
        #     saturate: 250,
        #     final_momentum: .7,
        # },
        !obj:best_params.MonitorBasedSaveBest {
             channel_name: "test_y_misclass",
             save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file},
        },
    ],

}
