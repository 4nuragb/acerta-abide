!obj:pylearn2.train.Train {

    dataset: &train !obj:csv_dataset.CSVDataset {
        path: '{train_data_source}',
        expect_headers: False,
        expect_labels: True,
    },

    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: {layer_batch},
        nvis: {layer_in},
        layers: [
            !obj:pretrained.PretrainedLayer {
                layer_name: "h1",
                # layer_content: !pkl: {data_transform_1},
                layer_content: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
                    nvis: 19900,
                    nhid: 15000,
                    irange: 0.0,
                    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
                        corruption_level: 0.0,
                    },
                    act_enc: tanh,
                    act_dec: null,
                },
                layer_params: !pkl: /home/anibal.heinsfeld/repos/acerta-abide/experiments/deep.valid/1/models/deep.valid.ae1_cv_1.params.pkl,
            },
            !obj:pretrained.PretrainedLayer {
                layer_name: "h2",
                # layer_content: !pkl: {data_transform_2},
                layer_content: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
                    nvis: 15000,
                    nhid: 10000,
                    irange: 0.0,
                    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
                        corruption_level: 0.0,
                    },
                    act_enc: tanh,
                    act_dec: null,
                },
                layer_params: !pkl: /home/anibal.heinsfeld/repos/acerta-abide/experiments/deep.valid/1/models/deep.valid.ae2_cv_1.params.pkl,
            },
            !obj:pretrained.PretrainedLayer {
                layer_name: "h3",
                # layer_content: !pkl: {data_transform_3},
                layer_content: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
                    nvis: 10000,
                    nhid: 5000,
                    irange: 0.0,
                    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
                        corruption_level: 0.0,
                    },
                    act_enc: tanh,
                    act_dec: null,
                },
                layer_params: !pkl: /home/anibal.heinsfeld/repos/acerta-abide/experiments/deep.valid/1/models/deep.valid.ae3_cv_1.params.pkl,
            },
            !obj:pretrained.PretrainedLayer {
                layer_name: "h4",
                # layer_content: !pkl: {data_transform_4},
                layer_content: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
                    nvis: 5000,
                    nhid: 500,
                    irange: 0.0,
                    corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
                        corruption_level: 0.0,
                    },
                    act_enc: tanh,
                    act_dec: null,
                },
                layer_params: !pkl: /home/anibal.heinsfeld/repos/acerta-abide/experiments/deep.valid/1/models/deep.valid.ae4_cv_1.params.pkl,
            },
            !obj:pylearn2.models.mlp.Softmax {
                max_col_norm: 3.0,
                layer_name: "y",
                n_classes: 2,
                irange: 0.05,
            },
        ],
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .0005,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .1,
        },
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_shuffled_sequential,
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:csv_dataset.CSVDataset {
                path: '{valid_data_source}',
                expect_headers: False,
                expect_labels: True,
            },
            'test': !obj:csv_dataset.CSVDataset {
                path: '{test_data_source}',
                expect_headers: False,
                expect_labels: True,
            },
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: {
                'h1': 0.6,
                'h2': 0.7,
                'h3': 0.8,
                # 'h4': 0.9,
            },
            input_scales: {
                'h1': 1.66,
                'h2': 1.42,
                'h3': 1.25,
                # 'h4': 1.11,
            },
            per_example: True,
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
    },

    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: {layer_max_epochs},
            final_momentum: .9,
        },
        # !obj:best_params.MonitorBasedSaveBest {
        #     channel_name: "valid_y_misclass",
        #     save_path: "{save_path}",
        # },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file},
        },
    ],

}
