!obj:pylearn2.train.Train {

    dataset: &train !obj:pylearn2.datasets.csv_dataset.CSVDataset {
        path: '{data_source}',
        expect_headers: False,
        expect_labels: True,
        start: {data_train_start},
        stop: {data_train_stop},
    },

    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: {layer_batch},
        nvis: {layer_in},
        layers: [
            !obj:pylearn2.models.mlp.PretrainedLayer {
                layer_name: 'h1',
                layer_content: !pkl: {data_transform},
            },
            !obj:pylearn2.models.mlp.Softmax {
                max_col_norm: 1.9365,
                layer_name: 'y',
                n_classes: 2,
                irange: .005,
            },
        ],
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .05,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5,
        },
        monitor_iteration_mode: even_batchwise_shuffled_sequential,
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:pylearn2.datasets.csv_dataset.CSVDataset {
                path: '{data_source}',
                expect_headers: False,
                expect_labels: True,
                start: {data_valid_start},
                stop: {data_valid_stop},
            },
            'test': !obj:pylearn2.datasets.csv_dataset.CSVDataset {
                path: '{test_data_source}',
                expect_headers: False,
                expect_labels: True,
                start: 0,
                stop: 100,
            },
        },
        cost: !obj:pylearn2.costs.mlp.Default {},
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.00004,
            min_lr: .000001,
        },
    },

    extensions: [
        # !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
        #      dataset_name: 'valid',
        #      high_trigger: 1.75,
        #      shrink_amt: .99,
        #      low_trigger: .99,
        #      grow_amt: 1.01
        # },
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .7,
        },
        !obj:best_params.MonitorBasedSaveBest {
             channel_name: "valid_y_misclass",
             save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file},
        },
    ],

}
