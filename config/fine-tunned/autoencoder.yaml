!obj:pylearn2.train.Train {

    dataset: &train !obj:pylearn2.datasets.csv_dataset.CSVDataset {
        path: '{data_source}',
        expect_headers: False,
        expect_labels: True,
        start: {data_train_start},
        stop: {data_train_stop}
    },

    model: !obj:pylearn2.models.autoencoder.ContractiveAutoencoder {
        nvis: {layer_in},
        nhid: {layer_out},
        irange: 0.05,
        # tied_weights: True,
        # corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
        #     corruption_level: {corruption},
        # },
        act_enc: {layer_enc},
        act_dec: {layer_dec},
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate : 1e-3,
        batch_size : {layer_batch},
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:pylearn2.datasets.csv_dataset.CSVDataset {
                path: '{data_source}',
                expect_headers: False,
                expect_labels: True,
                start: {data_valid_start},
                stop: {data_valid_stop},
            },
            'test': !obj:pylearn2.datasets.csv_dataset.CSVDataset {
                path: '{test_data_source}',
                expect_headers: False,
                expect_labels: True,
                start: 0,
                stop: 100,
            },
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.autoencoder.MeanBinaryCrossEntropy {},
                [0.1, !obj:pylearn2.costs.cost.MethodCost { method: contraction_penalty }]
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        }
    },

    extensions: [
        !obj:best_params.MonitorBasedSaveBest {
             channel_name: "valid_objective",
             save_path: "{save_path}",
             start_epoch: 20,
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file}
        },
    ],

}
