!obj:pylearn2.train.Train {

    dataset: &train !obj:csv_dataset.CSVDataset {
        path: "{train_data_source}",
        expect_headers: False,
        expect_labels: True,
        transformers: [
            &trans1 !pkl: {data_transform_1},
        ],
    },

    model: !obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
        nvis: {layer_in},
        nhid: {layer_out},
        irange: 0.06123724356,
        corruptor: !obj:pylearn2.corruption.BinomialCorruptor {
            corruption_level: {corruption},
        },
        act_enc: {layer_enc},
        act_dec: {layer_dec},
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate : 0.0001,
        batch_size : {layer_batch},
        monitoring_dataset: {
            "train": *train,
            "valid": !obj:csv_dataset.CSVDataset {
                path: "{valid_data_source}",
                expect_headers: False,
                expect_labels: True,
                transformers: [
                    *trans1,
                ],
            },
            "test": !obj:csv_dataset.CSVDataset {
                path: "{test_data_source}",
                expect_headers: False,
                expect_labels: True,
                transformers: [
                    *trans1,
                ],
            },
        },
        cost:
        # !obj:pylearn2.costs.cost.SumOfCosts {
            # costs: [
              !obj:pylearn2.costs.autoencoder.MeanSquaredReconstructionError {},
              # !obj:pylearn2.costs.autoencoder.SparseActivation {
              #     coeff: 0.8,
              #     p: 0.6,
              # },
        #     ],
        # },
        termination_criterion : !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        }
    },

    extensions: [
        # !obj:pylearn2.training_algorithms.sgd.MonitorBasedLRAdjuster {
        #     high_trigger: 1.00001,
        #     low_trigger: 0.99999,
        #     shrink_amt: 0.2,
        #     grow_amt: 1.2,
        #     min_lr: 0.00001,
        #     max_lr: 1.0,
        #     dataset_name: 'train'
        # },
        !obj:best_params.MonitorBasedSaveBest {
            channel_name: "valid_objective",
            save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file}
        },
    ],

}
