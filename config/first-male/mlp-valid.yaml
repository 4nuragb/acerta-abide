!obj:pylearn2.train.Train {

    dataset: &train !obj:csv_dataset.CSVDataset {
        path: '{train_data_source}',
        expect_headers: False,
        expect_labels: True,
    },

    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: {layer_batch},
        nvis: {layer_in},
        layers: [
            !obj:pylearn2.models.mlp.PretrainedLayer {
                layer_name: 'h1',
                layer_content: !pkl: {data_transform_1},
            },
            !obj:pylearn2.models.mlp.PretrainedLayer {
                layer_name: 'h2',
                layer_content: !pkl: {data_transform_2},
            },
            !obj:pylearn2.models.mlp.Softmax {
                max_col_norm: 3.0,
                layer_name: 'y',
                n_classes: 2,
                irange: 0.05,
            },
        ],
    },

    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: .0005,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .1,
        },
        train_iteration_mode: even_shuffled_sequential,
        monitor_iteration_mode: even_shuffled_sequential,
        monitoring_dataset: {
            'train': *train,
            'valid': !obj:csv_dataset.CSVDataset {
                path: '{valid_data_source}',
                expect_headers: False,
                expect_labels: True,
            },
            'test': !obj:csv_dataset.CSVDataset {
                path: '{test_data_source}',
                expect_headers: False,
                expect_labels: True,
            },
        },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: {
                'h1': 0.6,
                'h2': 0.8,
            },
            input_scales: {
                'h1': 1.66,
                'h2': 1.25,
            },
            per_example: True,
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: {layer_max_epochs},
        },
    },

    extensions: [
        !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: {layer_max_epochs},
            final_momentum: .9,
        },
        !obj:best_params.MonitorBasedSaveBest {
            channel_name: "valid_y_misclass",
            save_path: "{save_path}",
        },
        !obj:csv_monitoring.CSVMonitoring {
            name: "{namespace}.{step}.cv_{fold}",
            file: {log_file},
        },
    ],

}
